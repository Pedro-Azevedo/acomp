;===============================================================================
; Programa Mastermind
;
;
; Autor: Diogo, Leonor e Pedro
; Data: 				Ultima Alteracao:01/05/17
;===============================================================================

;===============================================================================
; ZONA I: Definicao de constantes
;         Pseudo-instrucao : EQU
;===============================================================================
; STACK POINTER
SP_INICIAL      EQU     FDFFh	

; DADOS DE JOGO
NUM_COR		EQU	0006h		;numero de cores versao standard
NUM_PECAS	EQU	0004h		;numero de peças versao standard
MASCARA		EQU	9C16h		;mascara para geração

; I/O a partir de FF00H
IO_CURSOR       EQU     FFFCh
IO_WRITE        EQU     FFFEh

LIMPAR_JANELA   EQU     FFFFh
XY_INICIAL      EQU     0004h
FIM_TEXTO       EQU     '@'

;===============================================================================
; ZONA II: Definicao de variaveis
;===============================================================================
                ORIG    8000h
;Variáveis de texto do tabuleiro
PlanoJogo       STR     ' |!   !   !   !   !|0P/0B|',FIM_TEXTO
Limites       	STR	'<=========================>', FIM_TEXTO
Separador       STR     ' -------------------------', FIM_TEXTO

;Variaveis de geração de peças
PecaA		WORD	0000h
PecaB		WORD	0000h
PecaC		WORD	0000h
PecaD		WORD	0000h		;4 words para cada peça versao standard
SeedIni		WORD	AC17h		;seed de geração

;===============================================================================
; ZONA III: Codigo
;===============================================================================
                ORIG    0000h
                JMP     inicio

;===============================================================================
; LimpaJanela: Rotina que limpa a janela de texto.
;===============================================================================
LimpaJanela:    PUSH R2
                MOV     R2, LIMPAR_JANELA
		            MOV     M[IO_CURSOR], R2
                POP R2
                RET

;===============================================================================
; EscCar: Rotina que efectua a escrita de um caracter para o ecran.
;         O caracter pode ser visualizado na janela de texto.
;               Entradas: R1 - Caracter a escrever
;               Saidas: ---
;               Efeitos: alteracao da posicao de memoria M[IO]
;===============================================================================
EscCar:         MOV     M[IO_WRITE], R1
                RET  

;===============================================================================
; EscString: Rotina que efectua a escrita de uma cadeia de caracter, terminada
;            pelo caracter FIM_TEXTO, na janela de texto numa posicao 
;            especificada. Pode-se definir como terminador qualquer caracter 
;            ASCII. 
;               Entradas: pilha - posicao para escrita do primeiro carater 
;                         pilha - apontador para o inicio da "string"
;               Saidas: ---
;               Efeitos: ---
;===============================================================================
EscString:      PUSH    R1
                PUSH    R2
				        PUSH    R3
                MOV     R2, M[SP+6]   ; Apontador para inicio da "string"
                MOV     R3, M[SP+5]   ; Localizacao do primeiro carater
Ciclo:          MOV     M[IO_CURSOR], R3
                MOV     R1, M[R2]
                CMP     R1, FIM_TEXTO
                BR.Z    FimEsc
                CALL    EscCar
                INC     R2
                INC     R3
                BR      Ciclo
FimEsc:         POP     R3
                POP     R2
                POP     R1
                RETN    2                ; Actualiza STACK

;===============================================================================
;  Tabuleiro: gera o tabuleiro onde o jogo será jogado
;===============================================================================
Tabuleiro:	    PUSH	  R3
		            MOV	    R3, 8
			                  CALL    LimpaJanela
		            MOV     R1, XY_INICIAL	    ; coloca R1 a apontar para a pos inicial
                BR  cimabaixo   
meio:		        ADD	    R1, 0100h	    ; R1 passa a apontar para a linha seguinte
		            PUSH    PlanoJogo           ; Passagem de parametros pelo STACK
                PUSH    R1                  ; Passagem de parametros pelo STACK
			                  CALL	EscString
                ADD     R1, 0100h
                PUSH    Separador           ; Passagem de parametros pelo STACK
                PUSH    R1                  ; Passagem de parametros pelo STACK
                	      CALL    EscString
		            DEC	    R3
		            CMP	    R3, R0		    ;todos os espaços de jogo estão criados quando R3=0
		            BR.NZ	meio
cimabaixo:	    ADD	    R1, 0100h
                PUSH    Limites             ; Passagem de parametros pelo STACK
                PUSH    R1                  ; Passagem de parametros pelo STACK
              		      CALL    EscString
		            CMP	    R3, 0008h
		            BR.Z	meio
		            POP	    R3
		            RET

;===============================================================================
;  GeraRand: Gera número da Cor aleatória
;===============================================================================
GeraRand:	      PUSH 	  R1
		            PUSH   	R2
		            MOV	    R2, NUM_COR
		            MOV	    R1, M[SeedIni]
		            DIV	    R1, R2			;o resto da divisão é armazenado em R2 (0->5)
		            MOV   	M[R3], R2		;a cada numero corresponde uma cor 
		            POP    	R2
		            POP    	R1
		            RET	

;===============================================================================
;  CriaSemente:	Cria a semente utilizada para obter a cor
;===============================================================================
CriaSemente:	  PUSH  	R1
		            PUSH  	R2
		            PUSH  	R3
		            MOV   	R1, M[SeedIni]
		            MOV   	R2, R1
		            MOV   	R3, MASCARA
		            RORC  	R1, 1
		            BR.NC 	bit0		;se o carry (bit de menor peso) nao ocorre Ni<-Ni xor MASCARA
		            XOR	    R2, R3
bit0:		        ROR	    R2, 1
		            MOV	    M[SeedIni], R2
		            POP	    R3
		            POP   	R2
		            POP   	R1
		            RET
                
;===============================================================================
;  GeraTudo: Gera todos os números e converte-os para cor
;===============================================================================
GeraTudo:	      PUSH  	R1
		            PUSH  	R3
		            MOV    	R1, NUM_PECAS		;são geradas NUM_PECAS peças
		            MOV	    R3, PecaA		;o valor da cor irá ser armazenado na memoria apontada por R3
gerador:		            CALL CriaSemente
			                  CALL GeraRand
		            INC   	R3		  	;R3 é incrementado para passar ao endereço da peça seguinte
		            DEC   	R1
		            BR.NZ	gerador
		            POP   	R3
		            POP   	R1
		            RET
                
;===============================================================================
;                                Programa prinicipal
;===============================================================================
inicio:         MOV     R1, SP_INICIAL
                MOV     SP, R1
			                  CALL Tabuleiro
			                  CALL GeraTudo
Fim:            BR      Fim
;===============================================================================

